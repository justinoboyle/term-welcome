{"version":3,"sources":["../src/index.js"],"names":["ns","currentScreen","init","changeScreen","getUsers","users","render","start","screen","key","ch","process","exit","keypress","global","stdin","on","chunk"],"mappings":";;;;;;;;;oEAmBA,kBAA4BA,EAA5B;AAAA;AAAA;AAAA;AAAA;AACIC,wCAAgBD,EAAhB;AADJ;AAAA,+BAEUA,GAAGE,IAAH,EAFV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,Y;;;;;;oEAMf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACkB,qBAAWC,QAAX,EADlB;;AAAA;AACIC,6BADJ;AAAA;AAAA,+BAEUC,QAFV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,K;;;;;;oEAKf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEUN,cAAcK,MAAd,CAAqBE,MAArB,oBAFV;;AAAA;;AAIIA,+BAAOC,GAAP,CAAW,CAAC,QAAD,EAAW,GAAX,EAAgB,KAAhB,CAAX;AAAA,4FAAmC,kBAAeC,EAAf,EAAmBD,GAAnB;AAAA;AAAA;AAAA;AAAA;AAC3B;AACA;AACAE,wDAAQC,IAAR,CAAa,CAAb;;AAH2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAnC;;AAAA;AAAA;AAAA;AAAA;;AAMAJ,+BAAOC,GAAP,CAAW,CAAC,WAAD,EAAc,QAAd,CAAX;AAAA,4FAAoC,kBAAeC,EAAf,EAAmBD,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDACjB,iCADiB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,uDAEtBR,cAAcY,QAAd,CAAuB,KAAvB,EAA8BV,YAA9B,CAFsB;;AAAA;AAAA;AAAA,uDAGtBG,QAHsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAApC;;AAAA;AAAA;AAAA;AAAA;;AAMAE,+BAAOC,GAAP,CAAW,CAAC,KAAD,CAAX;AAAA,4FAAoB,kBAAeC,EAAf,EAAmBD,GAAnB;AAAA;AAAA;AAAA;AAAA;AAChBE,wDAAQC,IAAR,CAAa,CAAC,CAAd;;AADgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAApB;;AAAA;AAAA;AAAA;AAAA;;AAIAJ,+BAAOF,MAAP;;AApBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeA,M;;;;;AA9Bf;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAQ,OAAON,MAAP,GAAgB,kBAAQA,MAAR,EAAhB;AACAM,OAAOT,KAAP,GAAe,EAAf;;AAEA,IAAIJ,mCAAJ;;AAEAU,QAAQI,KAAR,CAAcC,EAAd,CAAiB,MAAjB;AAAA,mEAAyB,iBAAeC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACfhB,cAAcY,QAAd,CAAuBI,KAAvB,EAA8Bd,YAA9B,CADe;;AAAA;AAAA;AAAA,+BAEfG,QAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzB;;AAAA;AAAA;AAAA;AAAA;;AAuCAC","file":"index.js","sourcesContent":["import 'babel-polyfill';\nimport 'babel-regenerator-runtime';\nimport blessed from 'blessed';\nimport os from 'os';\nimport systemutil from './util/systemutil'\nimport indexScreen from './screens/indexScreen';\nimport userLogin from './screens/userLogin';\nimport backspaceHandler from './util/backspaceHandler';\n\nglobal.screen = blessed.screen()\nglobal.users = [];\n\nlet currentScreen = userLogin;\n\nprocess.stdin.on('data', async function(chunk) { \n    await currentScreen.keypress(chunk, changeScreen);\n    await render();\n });\n\nasync function changeScreen(ns) {\n    currentScreen = ns;\n    await ns.init();\n}\n\n\nasync function start() {\n    users = await systemutil.getUsers();\n    await render();\n}\n\nasync function render() {\n    \n    await currentScreen.render(screen, blessed);\n\n    screen.key(['escape', 'q', 'C-c'], async function(ch, key) {\n            // await currentScreen.keypress(key, changeScreen);\n            // await render();\n            process.exit(0);\n    });\n\n    screen.key(['backspace', 'delete'], async function(ch, key) {\n            if(!(await backspaceHandler())) return;\n            await currentScreen.keypress('DEL', changeScreen);\n            await render();\n    });\n\n    screen.key(['C-d'], async function(ch, key) {\n        process.exit(-1);\n    });\n\n    screen.render(); \n}\n\nstart();"]}